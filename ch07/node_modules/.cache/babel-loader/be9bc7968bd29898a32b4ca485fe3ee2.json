{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bigdata\\\\Desktop\\\\workspace\\\\React\\\\ch07\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n/*\n  날짜 : 2020/10/21\n  이름 : 김보미\n  내용 : 컴포넌트 생명주기 실습하기\n\n  컴포넌트 생명주기\n    - 리액트의 모든 컴포넌트는 초기화 단계(mount), 업데이트 단계(update), 소멸단계(unmount)를 거친다.\n    - 각 단계 별로 자동으로 실행되는 함수를 생명주기 함수라고 한다.\n    - 생명주기 함수는 클래스 컴포넌트에서만 동작한다.\n\n  초기화(mount)단계\n    - Dom이 생성되고 브라우저에 컴포넌트가 나타나는 단계\n    - constructure -> getDerlvedStateFromProps -> render -> componentDidMount 순서로 진행\n  업데이트(update)단계\n    - 초기화 단계와 소멸단계 사이에서 반복되는 단계\n    - 컴포넌트의 속성값(props), 상태값(state)이 변경되면 자동으로 업데이트 단계 함수 실행\n    - getDerivedStateFromProps -> shouldComponentUpdate -> render -> getSnapshotBeforeUpdate -> componentDidUpdate 순서\n  소멸단(unmount)계 \n    - 마운트 단계의 반대과정으로 컴포넌트가 브라우저에서 제거될 때 실행되는 단계\n    - componentwillUnmount 함수 실행\n\n*/\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.inputRef = React.createRef();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, \"ch07.\\uB9AC\\uC561\\uD2B8 \\uCEF4\\uD3EC\\uB10C\\uD2B8 \\uC0DD\\uBA85\\uC8FC\\uAE30\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      ref: this.inputRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bigdata/Desktop/workspace/React/ch07/src/App.js"],"names":["React","Component","App","inputRef","createRef","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,WAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BE,QAD0B,GACfH,KAAK,CAACI,SAAN,EADe;AAAA;;AAG1BC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFADF,eAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,GAAG,EAAE,KAAKF,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAVyB;;AAa5B,eAAeD,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n/*\n  날짜 : 2020/10/21\n  이름 : 김보미\n  내용 : 컴포넌트 생명주기 실습하기\n\n  컴포넌트 생명주기\n    - 리액트의 모든 컴포넌트는 초기화 단계(mount), 업데이트 단계(update), 소멸단계(unmount)를 거친다.\n    - 각 단계 별로 자동으로 실행되는 함수를 생명주기 함수라고 한다.\n    - 생명주기 함수는 클래스 컴포넌트에서만 동작한다.\n\n  초기화(mount)단계\n    - Dom이 생성되고 브라우저에 컴포넌트가 나타나는 단계\n    - constructure -> getDerlvedStateFromProps -> render -> componentDidMount 순서로 진행\n  업데이트(update)단계\n    - 초기화 단계와 소멸단계 사이에서 반복되는 단계\n    - 컴포넌트의 속성값(props), 상태값(state)이 변경되면 자동으로 업데이트 단계 함수 실행\n    - getDerivedStateFromProps -> shouldComponentUpdate -> render -> getSnapshotBeforeUpdate -> componentDidUpdate 순서\n  소멸단(unmount)계 \n    - 마운트 단계의 반대과정으로 컴포넌트가 브라우저에서 제거될 때 실행되는 단계\n    - componentwillUnmount 함수 실행\n\n*/\nclass App extends Component {\n  inputRef = React.createRef();\n\n  render() {\n    return (\n      <div>\n        <h3>ch07.리액트 컴포넌트 생명주기</h3>\n        <input type=\"text\" ref={this.inputRef} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}