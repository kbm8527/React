{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bigdata\\\\Desktop\\\\workspace\\\\React\\\\ch07\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport LifeCycleCompo from \"./component/LifeCycleCompo\";\n/*\n  날짜 : 2020/10/21\n  이름 : 김보미\n  내용 : 컴포넌트 생명주기 실습하기\n\n  컴포넌트 생명주기\n    - 리액트의 모든 컴포넌트는 초기화 단계(mount), 업데이트 단계(update), 소멸단계(unmount)를 거친다.\n    - 각 단계 별로 자동으로 실행되는 함수를 생명주기 함수라고 한다.\n    - 생명주기 함수는 클래스 컴포넌트에서만 동작한다.\n\n  초기화(mount)단계\n    - Dom이 생성되고 브라우저에 컴포넌트가 나타나는 단계\n    - constructure -> getDerlvedStateFromProps -> render -> componentDidMount 순서로 진행\n  업데이트(update)단계\n    - 초기화 단계와 소멸단계 사이에서 반복되는 단계\n    - 컴포넌트의 속성값(props), 상태값(state)이 변경되면 자동으로 업데이트 단계 함수 실행\n    - getDerivedStateFromProps -> shouldComponentUpdate -> render -> getSnapshotBeforeUpdate -> componentDidUpdate 순서\n  소멸단(unmount)계 \n    - 마운트 단계의 반대과정으로 컴포넌트가 브라우저에서 제거될 때 실행되는 단계\n    - componentwillUnmount 함수 실행\n\n*/\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.inputRef = React.createRef();\n    this.state = {\n      tit: \"제목 입력\"\n    };\n\n    this.onClickHandler = () => {\n      this.setState({\n        tit: this.inputRef.current.value\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, \"ch07.\\uB9AC\\uC561\\uD2B8 \\uCEF4\\uD3EC\\uB10C\\uD2B8 \\uC0DD\\uBA85\\uC8FC\\uAE30\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      ref: this.inputRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.onClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, \"\\uC785\\uB825\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, \"\\uC785\\uB825 : \", this.state.tit), /*#__PURE__*/React.createElement(LifeCycleCompo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bigdata/Desktop/workspace/React/ch07/src/App.js"],"names":["React","Component","LifeCycleCompo","App","inputRef","createRef","state","tit","onClickHandler","setState","current","value","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,WAAP;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BG,QAF0B,GAEfJ,KAAK,CAACK,SAAN,EAFe;AAAA,SAK1BC,KAL0B,GAKlB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KALkB;;AAAA,SAO1BC,cAP0B,GAOT,MAAM;AACrB,WAAKC,QAAL,CAAc;AAAEF,QAAAA,GAAG,EAAE,KAAKH,QAAL,CAAcM,OAAd,CAAsBC;AAA7B,OAAd;AACD,KATyB;AAAA;;AAU1BC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFADF,eAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,GAAG,EAAE,KAAKR,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAQ,MAAA,OAAO,EAAE,KAAKI,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAS,KAAKF,KAAL,CAAWC,GAApB,CAJF,eAKE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AASD;;AApByB;;AAuB5B,eAAeJ,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport LifeCycleCompo from \"./component/LifeCycleCompo\";\n\n/*\n  날짜 : 2020/10/21\n  이름 : 김보미\n  내용 : 컴포넌트 생명주기 실습하기\n\n  컴포넌트 생명주기\n    - 리액트의 모든 컴포넌트는 초기화 단계(mount), 업데이트 단계(update), 소멸단계(unmount)를 거친다.\n    - 각 단계 별로 자동으로 실행되는 함수를 생명주기 함수라고 한다.\n    - 생명주기 함수는 클래스 컴포넌트에서만 동작한다.\n\n  초기화(mount)단계\n    - Dom이 생성되고 브라우저에 컴포넌트가 나타나는 단계\n    - constructure -> getDerlvedStateFromProps -> render -> componentDidMount 순서로 진행\n  업데이트(update)단계\n    - 초기화 단계와 소멸단계 사이에서 반복되는 단계\n    - 컴포넌트의 속성값(props), 상태값(state)이 변경되면 자동으로 업데이트 단계 함수 실행\n    - getDerivedStateFromProps -> shouldComponentUpdate -> render -> getSnapshotBeforeUpdate -> componentDidUpdate 순서\n  소멸단(unmount)계 \n    - 마운트 단계의 반대과정으로 컴포넌트가 브라우저에서 제거될 때 실행되는 단계\n    - componentwillUnmount 함수 실행\n\n*/\nclass App extends Component {\n  // ref생성\n  inputRef = React.createRef();\n\n  //상태값 생성\n  state = { tit: \"제목 입력\" };\n\n  onClickHandler = () => {\n    this.setState({ tit: this.inputRef.current.value });\n  };\n  render() {\n    return (\n      <div>\n        <h3>ch07.리액트 컴포넌트 생명주기</h3>\n        <input type=\"text\" ref={this.inputRef} />\n        <button onClick={this.onClickHandler}>입력</button>\n        <p>입력 : {this.state.tit}</p>\n        <LifeCycleCompo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}